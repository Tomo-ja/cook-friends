import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import parseCookies, { stringToDate, popupKeywords } from '../helpers'

import FilterSection from '../components/Home/SearchKeywordSection'
import HeroSection from '../components/Home/heroSection'

import StyledSEarchSection from '../components/SearchBarSection/index'
import StyledMainContent from '../styles/mainContent.styles'
import StyledSubContent from '../styles/subContent.styles'
import StyledHome from '../components/Home/home.styles'
import { Fridge, User, RandomRecipes, RecipeInfo } from '../helpers/typesLibrary'
import appAxios, { spoonacularApiAxios } from '../constants/axiosBase'


type Props = {
  user: User | null,
  expireFoods: string[],
  keywords: string[],
  randomRecipes: RecipeInfo[],
}

const randomRecipeTags = ['main course', 'side dish', 'appetizer']
// const randomRecipeTags = ['main course']

const Home: NextPage<Props> = ({ user, expireFoods, keywords, randomRecipes }: Props) => {
  return (
    <StyledHome>
      <Head>
        <title>Home | Cookit</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledSEarchSection />
      <StyledMainContent>

        <HeroSection randomRecipes={ randomRecipes } />

      </StyledMainContent>
      <StyledSubContent>
        {expireFoods.length > 0 && 
        <>
          <h3>Expiring Ingredients</h3>
          <FilterSection keywords={expireFoods}/>
        </>
        }
        <h3>What Is In Your Mind</h3>
          <FilterSection keywords={keywords}/>
      </StyledSubContent>
    </StyledHome>
  )
}

export default Home

Home.getInitialProps = async ({ req, res }): Promise<Props> => {
  const cookieData = parseCookies(req)
  const user: User | null = cookieData.user ? JSON.parse(cookieData.user) : null
  const expireFoods: string[] = []
  const keywords = popupKeywords()
  const randomRecipes: RecipeInfo[] = []

  const allRes = await Promise.all(randomRecipeTags.map(async tag => {
    const response = await spoonacularApiAxios.get('/recipes/random', {
      params: {
        number: 1,
        tags: tag
      }
    })
    return response.data as RandomRecipes
  }))
  
  allRes.forEach(recipe => {
    randomRecipes.push(recipe.recipes[0])
  })

  if(user) {
    const fridgeData = await appAxios.post('api/fridge/show', {
      user_id: user.id
    })
    Object.values(fridgeData.data).forEach((value: any) => {
      // TODO: define condition of expire
      if(true) {
        expireFoods.push(value.name)
      }
    })
  }
  
  if(res){
    if (Object.keys(cookieData).length === 0 && cookieData.constructor === Object) {
      res.writeHead(301, { Location: '/'})
      res.end()
    }
  }

  return {
    user,
    expireFoods,
    keywords,
    randomRecipes
  } 
}